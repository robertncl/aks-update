name: Update Single AKS Cluster

on:
  workflow_dispatch:
    inputs:
      resource_group:
        description: 'Resource Group Name'
        required: true
        type: string
      cluster_name:
        description: 'AKS Cluster Name'
        required: true
        type: string
      aks_version:
        description: 'Kubernetes Version (leave empty for latest)'
        required: false
        type: string

jobs:
  update-aks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Update AKS Cluster
        run: |
          RG="${{ github.event.inputs.resource_group }}"
          CLUSTER="${{ github.event.inputs.cluster_name }}"
          if [ -z "${{ github.event.inputs.aks_version }}" ]; then
            VERSION=$(az aks get-upgrades --resource-group "$RG" --name "$CLUSTER" --query 'controlPlaneProfile.upgrades[-1].kubernetesVersion' -o tsv)
          else
            VERSION="${{ github.event.inputs.aks_version }}"
          fi
          echo "Upgrading $CLUSTER in $RG to version $VERSION"
          az aks upgrade --resource-group "$RG" --name "$CLUSTER" --kubernetes-version "$VERSION" --yes
        shell: bash

      - name: Verify AKS Cluster Upgrade Status
        run: |
          RG="${{ github.event.inputs.resource_group }}"
          CLUSTER="${{ github.event.inputs.cluster_name }}"
          ATTEMPTS=0
          MAX_ATTEMPTS=30 # ~15 minutes if interval is 30s
          INTERVAL=30
          while true; do
            STATUS=$(az aks show --resource-group "$RG" --name "$CLUSTER" --query 'provisioningState' -o tsv)
            VERSION=$(az aks show --resource-group "$RG" --name "$CLUSTER" --query 'kubernetesVersion' -o tsv)
            echo "Cluster provisioning state: $STATUS"
            echo "Cluster Kubernetes version: $VERSION"
            if [ "$STATUS" = "Succeeded" ]; then
              echo "Cluster upgrade completed successfully."
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "ERROR: Cluster upgrade failed. Current state: $STATUS"
              exit 1
            fi
            ATTEMPTS=$((ATTEMPTS+1))
            if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
              echo "ERROR: Timed out waiting for cluster upgrade to complete."
              exit 1
            fi
            echo "Waiting for upgrade to complete... ($ATTEMPTS/$MAX_ATTEMPTS)"
            sleep $INTERVAL
          done
        shell: bash
      - name: Set Output for Cluster Update
        id: set-output
        run: |
          RG="${{ github.event.inputs.resource_group }}"
          CLUSTER="${{ github.event.inputs.cluster_name }}"
          VERSION=$(az aks show --resource-group "$RG" --name "$CLUSTER" --query 'kubernetesVersion' -o tsv)
          STATUS=$(az aks show --resource-group "$RG" --name "$CLUSTER" --query 'provisioningState' -o tsv)
          echo "resource_group=$RG" >> $GITHUB_OUTPUT
          echo "cluster_name=$CLUSTER" >> $GITHUB_OUTPUT
          echo "kubernetes_version=$VERSION" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload AKS Upgrade Metadata
        uses: actions/upload-artifact@v4
        with:
          name: aks-upgrade-metadata
          path: |
            metadata/resource_group
            metadata/cluster_name
            metadata/kubernetes_version
            metadata/status
        if: always()

